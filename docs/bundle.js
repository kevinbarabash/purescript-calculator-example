import { Component, createElement } from './react.js';
import { render as render$1 } from './react-dom.js';

var _refEq = function (r1) {
  return function (r2) {
    return r1 === r2;
  };
};

// Generated by purs version 0.12.2

var _unit = {};

var _showIntImpl = function (n) {
  return n.toString();
};

var _showNumberImpl = function (n) {
  var str = n.toString();
  return isNaN(str + ".0") ? str : str + ".0";
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

var Show = function (show) {
    this.show = show;
};
var showNumber = new Show(_showNumberImpl);
var showInt = new Show(_showIntImpl);
var show = function (dict) {
    return dict.show;
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

var Eq = function (eq) {
    this.eq = eq;
};
var eqInt = new Eq(_refEq);
var eqChar = new Eq(_refEq);
var eq = function (dict) {
    return dict.eq;
};

var _numDiv = function (n1) {
  return function (n2) {
    return n1 / n2;
  };
};

// Generated by purs version 0.12.2

var _numSub = function (n1) {
  return function (n2) {
    return n1 - n2;
  };
};

var _intAdd = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x + y | 0;
  };
};

var _intMul = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x * y | 0;
  };
};

var _numAdd = function (n1) {
  return function (n2) {
    return n1 + n2;
  };
};

var _numMul = function (n1) {
  return function (n2) {
    return n1 * n2;
  };
};

// Generated by purs version 0.12.2

var Semiring = function (add, mul, one, zero) {
    this.add = add;
    this.mul = mul;
    this.one = one;
    this.zero = zero;
};
var semiringNumber = new Semiring(_numAdd, _numMul, 1.0, 0.0);
var semiringInt = new Semiring(_intAdd, _intMul, 1, 0);
var mul = function (dict) {
    return dict.mul;
};
var add = function (dict) {
    return dict.add;
};

// Generated by purs version 0.12.2

var Ring = function (Semiring0, sub) {
    this.Semiring0 = Semiring0;
    this.sub = sub;
};
var sub = function (dict) {
    return dict.sub;
};
var ringNumber = new Ring(function () {
    return semiringNumber;
}, _numSub);

// Generated by purs version 0.12.2

var CommutativeRing = function (Ring0) {
    this.Ring0 = Ring0;
};
var commutativeRingNumber = new CommutativeRing(function () {
    return ringNumber;
});

// Generated by purs version 0.12.2

var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
    this.CommutativeRing0 = CommutativeRing0;
    this.degree = degree;
    this.div = div;
    this.mod = mod;
};
var euclideanRingNumber = new EuclideanRing(function () {
    return commutativeRingNumber;
}, function (v) {
    return 1;
}, _numDiv, function (v) {
    return function (v1) {
        return 0.0;
    };
});
var div = function (dict) {
    return dict.div;
};

// Generated by purs version 0.12.2

var Semigroupoid = function (compose) {
    this.compose = compose;
};
var semigroupoidFn = new Semigroupoid(function (f) {
    return function (g) {
        return function (x) {
            return f(g(x));
        };
    };
});
var compose = function (dict) {
    return dict.compose;
};
var composeFlipped = function (dictSemigroupoid) {
    return function (f) {
        return function (g) {
            return compose(dictSemigroupoid)(g)(f);
        };
    };
};

// Generated by purs version 0.12.2

var Category = function (Semigroupoid0, identity) {
    this.Semigroupoid0 = Semigroupoid0;
    this.identity = identity;
};
var identity = function (dict) {
    return dict.identity;
};
var categoryFn = new Category(function () {
    return semigroupoidFn;
}, function (x) {
    return x;
});

// Generated by purs version 0.12.2

var _unsafeCompareImpl = function (lt) {
  return function (eq) {
    return function (gt) {
      return function (x) {
        return function (y) {
          return x < y ? lt : x === y ? eq : gt;
        };
      };
    };
  };
};

var _concatArray = function (xs) {
  return function (ys) {
    if (xs.length === 0) return ys;
    if (ys.length === 0) return xs;
    return xs.concat(ys);
  };
};

// Generated by purs version 0.12.2

var Semigroup = function (append) {
    this.append = append;
};
var semigroupArray = new Semigroup(_concatArray);
var append = function (dict) {
    return dict.append;
};

// Generated by purs version 0.12.2

var LT = function () {
    function LT() {}    LT.value = new LT();
    return LT;
}();
var GT = function () {
    function GT() {}    GT.value = new GT();
    return GT;
}();
var EQ = function () {
    function EQ() {}    EQ.value = new EQ();
    return EQ;
}();

// Generated by purs version 0.12.2

var unsafeCompare = _unsafeCompareImpl(LT.value)(EQ.value)(GT.value);

// Generated by purs version 0.12.2

var Ord = function (Eq0, compare) {
    this.Eq0 = Eq0;
    this.compare = compare;
};
var ordInt = new Ord(function () {
    return eqInt;
}, unsafeCompare);
var ordChar = new Ord(function () {
    return eqChar;
}, unsafeCompare);
var compare = function (dict) {
    return dict.compare;
};

// Generated by purs version 0.12.2
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};

var _arrayMap = function (f) {
  return function (arr) {
    var l = arr.length;
    var result = new Array(l);
    for (var i = 0; i < l; i++) {
      result[i] = f(arr[i]);
    }
    return result;
  };
};

// Generated by purs version 0.12.2

var Functor = function (map) {
    this.map = map;
};
var map = function (dict) {
    return dict.map;
};
var functorFn = new Functor(compose(semigroupoidFn));
var functorArray = new Functor(_arrayMap);

// Generated by purs version 0.12.2

var Alt = function (Functor0, alt) {
    this.Functor0 = Functor0;
    this.alt = alt;
};
var altArray = new Alt(function () {
    return functorArray;
}, append(semigroupArray));

var _arrayApply = function (fs) {
  return function (xs) {
    var l = fs.length;
    var k = xs.length;
    var result = new Array(l * k);
    var n = 0;
    for (var i = 0; i < l; i++) {
      var f = fs[i];
      for (var j = 0; j < k; j++) {
        result[n++] = f(xs[j]);
      }
    }
    return result;
  };
};

// Generated by purs version 0.12.2

var Apply = function (Functor0, apply) {
    this.Functor0 = Functor0;
    this.apply = apply;
};
var applyFn = new Apply(function () {
    return functorFn;
}, function (f) {
    return function (g) {
        return function (x) {
            return f(x)(g(x));
        };
    };
});
var applyArray = new Apply(function () {
    return functorArray;
}, _arrayApply);
var apply = function (dict) {
    return dict.apply;
};

// Generated by purs version 0.12.2

var Applicative = function (Apply0, pure) {
    this.Apply0 = Apply0;
    this.pure = pure;
};
var pure = function (dict) {
    return dict.pure;
};
var liftA1 = function (dictApplicative) {
    return function (f) {
        return function (a) {
            return apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
        };
    };
};
var applicativeFn = new Applicative(function () {
    return applyFn;
}, function (x) {
    return function (v) {
        return x;
    };
});

// Generated by purs version 0.12.2

var Plus = function (Alt0, empty) {
    this.Alt0 = Alt0;
    this.empty = empty;
};

// Generated by purs version 0.12.2

var _arrayBind = function (arr) {
  return function (f) {
    var result = [];
    for (var i = 0, l = arr.length; i < l; i++) {
      Array.prototype.push.apply(result, f(arr[i]));
    }
    return result;
  };
};

// Generated by purs version 0.12.2

var Bind = function (Apply0, bind) {
    this.Apply0 = Apply0;
    this.bind = bind;
};
var bindFn = new Bind(function () {
    return applyFn;
}, function (m) {
    return function (f) {
        return function (x) {
            return f(m(x))(x);
        };
    };
});
var bindArray = new Bind(function () {
    return applyArray;
}, _arrayBind);
var bind = function (dict) {
    return dict.bind;
};
var bindFlipped = function (dictBind) {
    return flip(bind(dictBind));
};
var composeKleisliFlipped = function (dictBind) {
    return function (f) {
        return function (g) {
            return function (a) {
                return bindFlipped(dictBind)(f)(g(a));
            };
        };
    };
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

var Monad = function (Applicative0, Bind1) {
    this.Applicative0 = Applicative0;
    this.Bind1 = Bind1;
};
var monadFn = new Monad(function () {
    return applicativeFn;
}, function () {
    return bindFn;
});
var ap = function (dictMonad) {
    return function (f) {
        return function (a) {
            return bind(dictMonad.Bind1())(f)(function (v) {
                return bind(dictMonad.Bind1())(a)(function (v1) {
                    return pure(dictMonad.Applicative0())(v(v1));
                });
            });
        };
    };
};

// Generated by purs version 0.12.2

var _topInt = 2147483647;

var _bottomInt = -2147483648;

var _topChar = String.fromCharCode(65535);

var _bottomChar = String.fromCharCode(0);

// Generated by purs version 0.12.2

var Bounded = function (Ord0, bottom, top) {
    this.Ord0 = Ord0;
    this.bottom = bottom;
    this.top = top;
};
var top = function (dict) {
    return dict.top;
};
var boundedInt = new Bounded(function () {
    return ordInt;
}, _bottomInt, _topInt);
var boundedChar = new Bounded(function () {
    return ordChar;
}, _bottomChar, _topChar);
var bottom = function (dict) {
    return dict.bottom;
};

// Generated by purs version 0.12.2

var Monoid = function (Semigroup0, mempty) {
    this.Semigroup0 = Semigroup0;
    this.mempty = mempty;
};
var mempty = function (dict) {
    return dict.mempty;
};

// Generated by purs version 0.12.2

var DivisionRing = function (Ring0, recip) {
    this.Ring0 = Ring0;
    this.recip = recip;
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

var Nothing = function () {
    function Nothing() {}    Nothing.value = new Nothing();
    return Nothing;
}();
var Just = function () {
    function Just(value0) {
        this.value0 = value0;
    }    Just.create = function (value0) {
        return new Just(value0);
    };
    return Just;
}();
var maybe = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Nothing) {
                return v;
            }            if (v2 instanceof Just) {
                return v1(v2.value0);
            }            throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
        };
    };
};
var functorMaybe = new Functor(function (v) {
    return function (v1) {
        if (v1 instanceof Just) {
            return new Just(v(v1.value0));
        }        return Nothing.value;
    };
});
var fromJust = function (dictPartial) {
    return function (v) {
        if (v instanceof Just) {
            return v.value0;
        }        throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [v.constructor.name]);
    };
};
var applyMaybe = new Apply(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Just) {
            return map(functorMaybe)(v.value0)(v1);
        }        if (v instanceof Nothing) {
            return Nothing.value;
        }        throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 67, column 35): " + [v.constructor.name, v1.constructor.name]);
    };
});
var bindMaybe = new Bind(function () {
    return applyMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Just) {
            return v1(v.value0);
        }        if (v instanceof Nothing) {
            return Nothing.value;
        }        throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 125, column 33): " + [v.constructor.name, v1.constructor.name]);
    };
});

var _indexImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function (i) {
        return i < 0 || i >= xs.length ? nothing : just(xs[i]);
      };
    };
  };
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2
var semigroupFirst = new Semigroup(function (v) {
    return function (v1) {
        if (v instanceof Just) {
            return v;
        }        return v1;
    };
});
var monoidFirst = new Monoid(function () {
    return semigroupFirst;
}, Nothing.value);
var functorFirst = functorMaybe;
var altFirst = new Alt(function () {
    return functorFirst;
}, append(semigroupFirst));
var plusFirst = new Plus(function () {
    return altFirst;
}, mempty(monoidFirst));

// Generated by purs version 0.12.2
var semigroupLast = new Semigroup(function (v) {
    return function (v1) {
        if (v1 instanceof Just) {
            return v1;
        }        if (v1 instanceof Nothing) {
            return v;
        }        throw new Error("Failed pattern match at Data.Maybe.Last (line 52, column 1 - line 52, column 45): " + [v.constructor.name, v1.constructor.name]);
    };
});
var monoidLast = new Monoid(function () {
    return semigroupLast;
}, Nothing.value);
var functorLast = functorMaybe;
var altLast = new Alt(function () {
    return functorLast;
}, append(semigroupLast));
var plusLast = new Plus(function () {
    return altLast;
}, mempty(monoidLast));

// Generated by purs version 0.12.2

var Foldable = function (foldMap, foldl, foldr) {
    this.foldMap = foldMap;
    this.foldl = foldl;
    this.foldr = foldr;
};
var foldr = function (dict) {
    return dict.foldr;
};
var foldl = function (dict) {
    return dict.foldl;
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

var FunctorWithIndex = function (Functor0, mapWithIndex) {
    this.Functor0 = Functor0;
    this.mapWithIndex = mapWithIndex;
};
var mapWithIndex = function (dict) {
    return dict.mapWithIndex;
};

// Generated by purs version 0.12.2
var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
    this.Foldable0 = Foldable0;
    this.foldMapWithIndex = foldMapWithIndex;
    this.foldlWithIndex = foldlWithIndex;
    this.foldrWithIndex = foldrWithIndex;
};
var foldrWithIndex = function (dict) {
    return dict.foldrWithIndex;
};
var foldlWithIndex = function (dict) {
    return dict.foldlWithIndex;
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

var _pureE = function (a) {
  return function () {
    return a;
  };
};

var _bindE = function (a) {
  return function (f) {
    return function () {
      return f(a())();
    };
  };
};

// Generated by purs version 0.12.2

var monadEffect = new Monad(function () {
    return applicativeEffect;
}, function () {
    return bindEffect;
});
var bindEffect = new Bind(function () {
    return applyEffect;
}, _bindE);
var applyEffect = new Apply(function () {
    return functorEffect;
}, ap(monadEffect));
var applicativeEffect = new Applicative(function () {
    return applyEffect;
}, _pureE);
var functorEffect = new Functor(liftA1(applicativeEffect));

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

var Tuple = function () {
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    return Tuple;
}();
var snd = function (v) {
    return v.value1;
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2
var bindNonEmptyArray = bindArray;

// module Unsafe.Coerce

var _unsafeCoerce = function (x) {
  return x;
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2
var singleton = function (a) {
    return [a];
};
var index = _indexImpl(Just.create)(Nothing.value);
var concatMap = flip(bind(bindArray));
var mapMaybe = function (f) {
    return concatMap(function ($114) {
        return maybe([])(singleton)(f($114));
    });
};
var catMaybes = mapMaybe(identity(categoryFn));

var _toCharCode = function (c) {
  return c.charCodeAt(0);
};

var _fromCharCode = function (c) {
  return String.fromCharCode(c);
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2
var Enum = function (Ord0, pred, succ) {
    this.Ord0 = Ord0;
    this.pred = pred;
    this.succ = succ;
};
var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
    this.Bounded0 = Bounded0;
    this.Enum1 = Enum1;
    this.cardinality = cardinality;
    this.fromEnum = fromEnum;
    this.toEnum = toEnum;
};
var toEnum = function (dict) {
    return dict.toEnum;
};
var fromEnum = function (dict) {
    return dict.fromEnum;
};
var defaultSucc = function (toEnum$prime) {
    return function (fromEnum$prime) {
        return function (a) {
            return toEnum$prime(fromEnum$prime(a) + 1 | 0);
        };
    };
};
var defaultPred = function (toEnum$prime) {
    return function (fromEnum$prime) {
        return function (a) {
            return toEnum$prime(fromEnum$prime(a) - 1 | 0);
        };
    };
};
var charToEnum = function (v) {
    if (v >= bottom(boundedInt) && v <= top(boundedInt)) {
        return new Just(_fromCharCode(v));
    }    return Nothing.value;
};
var enumChar = new Enum(function () {
    return ordChar;
}, defaultPred(charToEnum)(_toCharCode), defaultSucc(charToEnum)(_toCharCode));
var boundedEnumChar = new BoundedEnum(function () {
    return boundedChar;
}, function () {
    return enumChar;
}, _toCharCode(top(boundedChar)) - _toCharCode(bottom(boundedChar)) | 0, _toCharCode, charToEnum);

var _fromNumberImpl = function (just) {
  return function (nothing) {
    return function (n) {
      /* jshint bitwise: false */
      return (n | 0) === n ? just(n) : nothing;
    };
  };
};

var _toNumber = function (n) {
  return n;
};

var _fromStringAsImpl = function (just) {
  return function (nothing) {
    return function (radix) {
      var digits;
      if (radix < 11) {
        digits = "[0-" + (radix - 1).toString() + "]";
      } else if (radix === 11) {
        digits = "[0-9a]";
      } else {
        digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
      }
      var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

      return function (s) {
        /* jshint bitwise: false */
        if (pattern.test(s)) {
          var i = parseInt(s, radix);
          return (i | 0) === i ? just(i) : nothing;
        } else {
          return nothing;
        }
      };
    };
  };
};

// Generated by purs version 0.12.2

/* globals exports */
var _readFloat = parseFloat;

// Generated by purs version 0.12.2

var _e = Math.E;
var _ln = Math.LN2;
var _ln2 = Math.LN10;
var _log2e = Math.LOG2E;
var _log10e = Math.LOG10E;
var _pi = Math.PI;

var _tau = 2 * Math.PI;
var _sqrt1_ = Math.SQRT1_2;
var _sqrt2 = Math.SQRT2;

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2
var Even = function () {
    function Even() {}    Even.value = new Even();
    return Even;
}();
var Odd = function () {
    function Odd() {}    Odd.value = new Odd();
    return Odd;
}();
var fromStringAs = _fromStringAsImpl(Just.create)(Nothing.value);
var fromString = fromStringAs(10);
var fromNumber = _fromNumberImpl(Just.create)(Nothing.value);
var eqParity = new Eq(function (x) {
    return function (y) {
        if (x instanceof Even && y instanceof Even) {
            return true;
        }        if (x instanceof Odd && y instanceof Odd) {
            return true;
        }        return false;
    };
});
var semiringParity = new Semiring(function (x) {
    return function (y) {
        var $19 = eq(eqParity)(x)(y);
        if ($19) {
            return Even.value;
        }        return Odd.value;
    };
}, function (v) {
    return function (v1) {
        if (v instanceof Odd && v1 instanceof Odd) {
            return Odd.value;
        }        return Even.value;
    };
}, Odd.value, Even.value);
var ringParity = new Ring(function () {
    return semiringParity;
}, add(semiringParity));
var divisionRingParity = new DivisionRing(function () {
    return ringParity;
}, identity(categoryFn));

var _toChar = function (just) {
  return function (nothing) {
    return function (s) {
      return s.length === 1 ? just(s) : nothing;
    };
  };
};

var _indexOf = function (just) {
  return function (nothing) {
    return function (x) {
      return function (s) {
        var i = s.indexOf(x);
        return i === -1 ? nothing : just(i);
      };
    };
  };
};

var _lastIndexOf = function (just) {
  return function (nothing) {
    return function (x) {
      return function (s) {
        var i = s.lastIndexOf(x);
        return i === -1 ? nothing : just(i);
      };
    };
  };
};

var _lastIndexOf$prime = function (just) {
  return function (nothing) {
    return function (x) {
      return function (startAt) {
        return function (s) {
          if (startAt < 0 || startAt > s.length) return nothing;
          var i = s.lastIndexOf(x, startAt);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2
var toChar = _toChar(Just.create)(Nothing.value);
var lastIndexOf$prime = _lastIndexOf$prime(Just.create)(Nothing.value);
var lastIndexOf = _lastIndexOf(Just.create)(Nothing.value);
var indexOf = _indexOf(Just.create)(Nothing.value);

var _replace = function (s1) {
  return function (s2) {
    return function (s3) {
      return s3.replace(s1, s2);
    };
  };
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2
var eqCodePoint = new Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordCodePoint = new Ord(function () {
    return eqCodePoint;
}, function (x) {
    return function (y) {
        return compare(ordInt)(x)(y);
    };
});
var boundedCodePoint = new Bounded(function () {
    return ordCodePoint;
}, 0, 1114111);
var boundedEnumCodePoint = new BoundedEnum(function () {
    return boundedCodePoint;
}, function () {
    return enumCodePoint;
}, 1114111 + 1 | 0, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 1114111) {
        return new Just(n);
    }    {
        return Nothing.value;
    }    throw new Error("Failed pattern match at Data.String.CodePoints (line 63, column 1 - line 63, column 55): " + [n.constructor.name]);
});
var enumCodePoint = new Enum(function () {
    return ordCodePoint;
}, defaultPred(toEnum(boundedEnumCodePoint))(fromEnum(boundedEnumCodePoint)), defaultSucc(toEnum(boundedEnumCodePoint))(fromEnum(boundedEnumCodePoint)));

// Generated by purs version 0.12.2

function includes(searchString) {
  return function (str) {
    return str.includes(searchString);
  };
}

function startsWith(searchString) {
  return function (s) {
    return s.startsWith(searchString);
  };
}

// Generated by purs version 0.12.2

var NonEmpty = function () {
    function NonEmpty(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }    NonEmpty.create = function (value0) {
        return function (value1) {
            return new NonEmpty(value0, value1);
        };
    };
    return NonEmpty;
}();
var functorNonEmpty = function (dictFunctor) {
    return new Functor(function (f) {
        return function (m) {
            return new NonEmpty(f(m.value0), map(dictFunctor)(f)(m.value1));
        };
    });
};
var functorWithIndex = function (dictFunctorWithIndex) {
    return new FunctorWithIndex(function () {
        return functorNonEmpty(dictFunctorWithIndex.Functor0());
    }, function (f) {
        return function (v) {
            return new NonEmpty(f(Nothing.value)(v.value0), mapWithIndex(dictFunctorWithIndex)(function ($146) {
                return f(Just.create($146));
            })(v.value1));
        };
    });
};

// Generated by purs version 0.12.2
var concatMap$1 = flip(bind(bindNonEmptyArray));

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

var _createComponent = function () {
  // Begin component prototype functions
  // (`this`-dependent, defined outside `createComponent`
  // for a slight performance boost)
  function toSelf() {
    var instance = this;
    var setStateThen = function (update) {
      return function (effects) {
        return function () {
          instance.setState(function (state) {
            return { $$state: update(state.$$state) };
          }, effects);
        };
      };
    };
    var self = {
      props: instance.props.$$props,
      state: instance.state === null ? null : instance.state.$$state,
      setState: function (update) {
        return setStateThen(update)(undefined);
      },
      setStateThen: setStateThen,
      instance_: instance
    };
    return self;
  }

  function componentDidMount() {
    var didMount = this.$$spec.didMount;
    if (didMount !== undefined) {
      didMount(this.toSelf())();
    }
  }

  function shouldComponentUpdate(nextProps, nextState) {
    var shouldUpdate = this.$$spec.shouldUpdate;
    return shouldUpdate === undefined ? true : shouldUpdate(this.toSelf())({
      nextProps: nextProps.$$props,
      nextState: nextState === null ? null : nextState.$$state
    });
  }

  function componentDidUpdate(prevProps, prevState) {
    var didUpdate = this.$$spec.didUpdate;
    if (didUpdate !== undefined) {
      didUpdate(this.toSelf())({
        prevProps: prevProps.$$props,
        prevState: prevState === null ? null : prevState.$$state
      })();
    }
  }

  function componentWillUnmount() {
    this.$$mounted = false;
    var willUnmount = this.$$spec.willUnmount;
    if (willUnmount !== undefined) {
      willUnmount(this.toSelf())();
    }
  }

  function render() {
    return this.$$spec.render(this.toSelf());
  }
  // End component prototype functions

  return function (displayName) {
    var Component$1 = function constructor(props) {
      this.$$mounted = true;
      this.$$spec = props.$$spec;
      this.state =
      // React may optimize components with no state,
      // so we leave state null if it was left as
      // the default value.
      this.$$spec.initialState === undefined ? null : { $$state: this.$$spec.initialState };
      return this;
    };

    Component$1.displayName = displayName;
    Component$1.prototype = Object.create(Component.prototype);
    Component$1.prototype.constructor = Component$1;
    Component$1.prototype.toSelf = toSelf;
    Component$1.prototype.shouldComponentUpdate = shouldComponentUpdate;
    Component$1.prototype.componentDidMount = componentDidMount;
    Component$1.prototype.componentDidUpdate = componentDidUpdate;
    Component$1.prototype.componentWillUnmount = componentWillUnmount;
    Component$1.prototype.render = render;

    return Component$1;
  };
}();

var _make = function (_unionDict) {
  return function ($$type) {
    return function ($$spec) {
      var $$specPadded = {
        initialState: $$spec.initialState,
        render: $$spec.render,
        didMount: $$spec.didMount,
        shouldUpdate: $$spec.shouldUpdate,
        didUpdate: $$spec.didUpdate,
        willUnmount: $$spec.willUnmount
      };
      return function ($$props) {
        var props = {
          $$props: $$props,
          $$spec: $$specPadded
        };
        return createElement($$type, props);
      };
    };
  };
};

var _element_ = function (component, props) {
  return createElement.apply(null, [component, props].concat(props && props.children || null));
};

var _runFn2 = function (fn) {
  return function (a) {
    return function (b) {
      return fn(a, b);
    };
  };
};

// Generated by purs version 0.12.2

var _nullable = function (a, r, f) {
  return a == null ? r : f(a);
};

// Generated by purs version 0.12.2
var toMaybe = function (n) {
    return _nullable(n, Nothing.value, Just.create);
};

var _runEffectFn3 = function runEffectFn3(fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function () {
          return fn(a, b, c);
        };
      };
    };
  };
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2
var element = _runFn2(_element_);

var _render_ = function (jsx, node, callback) {
  render$1(jsx, node, callback);
};

var _mergeStyles = function (styles) {
  return Object.assign.apply(null, [{}].concat(styles));
};

var _error = function (msg) {
  return new Error(msg);
};

var _throwException = function (e) {
  return function () {
    throw e;
  };
};

// Generated by purs version 0.12.2
var $$throw = function ($1) {
    return _throwException(_error($1));
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

var EventFn = function (x) {
    return x;
};
var unsafeEventFn = EventFn;
var semigroupoidBuilder = semigroupoidFn;
var handler = function (v) {
    return function (cb) {
        return function ($22) {
            return cb(v($22))();
        };
    };
};
var categoryBuilder = categoryFn;
var syntheticEvent = identity(categoryBuilder);

// Generated by purs version 0.12.2

var unsafeCreateDOMComponent = _unsafeCoerce;

// Generated by purs version 0.12.2
var div$1 = function (dictUnion) {
    return element(unsafeCreateDOMComponent("div"));
};
var button = function (dictUnion) {
    return element(unsafeCreateDOMComponent("button"));
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

var _toDateTimeImpl = function (ctor) {
  return function (instant) {
    var dt = new Date(instant);
    return ctor(dt.getUTCFullYear())(dt.getUTCMonth() + 1)(dt.getUTCDate())(dt.getUTCHours())(dt.getUTCMinutes())(dt.getUTCSeconds())(dt.getUTCMilliseconds());
  };
};

var createDate = function (y, m, d) {
  var date = new Date(Date.UTC(y, m, d));
  if (y >= 0 && y < 100) {
    date.setUTCFullYear(y);
  }
  return date;
};

var _canonicalDateImpl = function (ctor, y, m, d) {
  var date = createDate(y, m - 1, d);
  return ctor(date.getUTCFullYear())(date.getUTCMonth() + 1)(date.getUTCDate());
};

// Generated by purs version 0.12.2
var January = function () {
    function January() {}    January.value = new January();
    return January;
}();
var February = function () {
    function February() {}    February.value = new February();
    return February;
}();
var March = function () {
    function March() {}    March.value = new March();
    return March;
}();
var April = function () {
    function April() {}    April.value = new April();
    return April;
}();
var May = function () {
    function May() {}    May.value = new May();
    return May;
}();
var June = function () {
    function June() {}    June.value = new June();
    return June;
}();
var July = function () {
    function July() {}    July.value = new July();
    return July;
}();
var August = function () {
    function August() {}    August.value = new August();
    return August;
}();
var September = function () {
    function September() {}    September.value = new September();
    return September;
}();
var October = function () {
    function October() {}    October.value = new October();
    return October;
}();
var November = function () {
    function November() {}    November.value = new November();
    return November;
}();
var December = function () {
    function December() {}    December.value = new December();
    return December;
}();
var ordYear = ordInt;
var ordDay = ordInt;
var eqYear = eqInt;
var eqMonth = new Eq(function (x) {
    return function (y) {
        if (x instanceof January && y instanceof January) {
            return true;
        }        if (x instanceof February && y instanceof February) {
            return true;
        }        if (x instanceof March && y instanceof March) {
            return true;
        }        if (x instanceof April && y instanceof April) {
            return true;
        }        if (x instanceof May && y instanceof May) {
            return true;
        }        if (x instanceof June && y instanceof June) {
            return true;
        }        if (x instanceof July && y instanceof July) {
            return true;
        }        if (x instanceof August && y instanceof August) {
            return true;
        }        if (x instanceof September && y instanceof September) {
            return true;
        }        if (x instanceof October && y instanceof October) {
            return true;
        }        if (x instanceof November && y instanceof November) {
            return true;
        }        if (x instanceof December && y instanceof December) {
            return true;
        }        return false;
    };
});
var ordMonth = new Ord(function () {
    return eqMonth;
}, function (x) {
    return function (y) {
        if (x instanceof January && y instanceof January) {
            return EQ.value;
        }        if (x instanceof January) {
            return LT.value;
        }        if (y instanceof January) {
            return GT.value;
        }        if (x instanceof February && y instanceof February) {
            return EQ.value;
        }        if (x instanceof February) {
            return LT.value;
        }        if (y instanceof February) {
            return GT.value;
        }        if (x instanceof March && y instanceof March) {
            return EQ.value;
        }        if (x instanceof March) {
            return LT.value;
        }        if (y instanceof March) {
            return GT.value;
        }        if (x instanceof April && y instanceof April) {
            return EQ.value;
        }        if (x instanceof April) {
            return LT.value;
        }        if (y instanceof April) {
            return GT.value;
        }        if (x instanceof May && y instanceof May) {
            return EQ.value;
        }        if (x instanceof May) {
            return LT.value;
        }        if (y instanceof May) {
            return GT.value;
        }        if (x instanceof June && y instanceof June) {
            return EQ.value;
        }        if (x instanceof June) {
            return LT.value;
        }        if (y instanceof June) {
            return GT.value;
        }        if (x instanceof July && y instanceof July) {
            return EQ.value;
        }        if (x instanceof July) {
            return LT.value;
        }        if (y instanceof July) {
            return GT.value;
        }        if (x instanceof August && y instanceof August) {
            return EQ.value;
        }        if (x instanceof August) {
            return LT.value;
        }        if (y instanceof August) {
            return GT.value;
        }        if (x instanceof September && y instanceof September) {
            return EQ.value;
        }        if (x instanceof September) {
            return LT.value;
        }        if (y instanceof September) {
            return GT.value;
        }        if (x instanceof October && y instanceof October) {
            return EQ.value;
        }        if (x instanceof October) {
            return LT.value;
        }        if (y instanceof October) {
            return GT.value;
        }        if (x instanceof November && y instanceof November) {
            return EQ.value;
        }        if (x instanceof November) {
            return LT.value;
        }        if (y instanceof November) {
            return GT.value;
        }        if (x instanceof December && y instanceof December) {
            return EQ.value;
        }        throw new Error("Failed pattern match at Data.Date.Component (line 61, column 8 - line 61, column 38): " + [x.constructor.name, y.constructor.name]);
    };
});
var eqDay = eqInt;
var boundedYear = new Bounded(function () {
    return ordYear;
}, -271820 | 0, 275759);
var boundedMonth = new Bounded(function () {
    return ordMonth;
}, January.value, December.value);
var boundedEnumMonth = new BoundedEnum(function () {
    return boundedMonth;
}, function () {
    return enumMonth;
}, 12, function (v) {
    if (v instanceof January) {
        return 1;
    }    if (v instanceof February) {
        return 2;
    }    if (v instanceof March) {
        return 3;
    }    if (v instanceof April) {
        return 4;
    }    if (v instanceof May) {
        return 5;
    }    if (v instanceof June) {
        return 6;
    }    if (v instanceof July) {
        return 7;
    }    if (v instanceof August) {
        return 8;
    }    if (v instanceof September) {
        return 9;
    }    if (v instanceof October) {
        return 10;
    }    if (v instanceof November) {
        return 11;
    }    if (v instanceof December) {
        return 12;
    }    throw new Error("Failed pattern match at Data.Date.Component (line 87, column 14 - line 101, column 1): " + [v.constructor.name]);
}, function (v) {
    if (v === 1) {
        return new Just(January.value);
    }    if (v === 2) {
        return new Just(February.value);
    }    if (v === 3) {
        return new Just(March.value);
    }    if (v === 4) {
        return new Just(April.value);
    }    if (v === 5) {
        return new Just(May.value);
    }    if (v === 6) {
        return new Just(June.value);
    }    if (v === 7) {
        return new Just(July.value);
    }    if (v === 8) {
        return new Just(August.value);
    }    if (v === 9) {
        return new Just(September.value);
    }    if (v === 10) {
        return new Just(October.value);
    }    if (v === 11) {
        return new Just(November.value);
    }    if (v === 12) {
        return new Just(December.value);
    }    return Nothing.value;
});
var enumMonth = new Enum(function () {
    return ordMonth;
}, function ($50) {
    return toEnum(boundedEnumMonth)(function (v) {
        return v - 1 | 0;
    }(fromEnum(boundedEnumMonth)($50)));
}, function ($51) {
    return toEnum(boundedEnumMonth)(function (v) {
        return v + 1 | 0;
    }(fromEnum(boundedEnumMonth)($51)));
});
var boundedDay = new Bounded(function () {
    return ordDay;
}, 1, 31);

// Generated by purs version 0.12.2
var Milliseconds = function (x) {
    return x;
};
var Duration = function (fromDuration, toDuration) {
    this.fromDuration = fromDuration;
    this.toDuration = toDuration;
};
var durationMilliseconds = new Duration(identity(categoryFn), identity(categoryFn));

// Generated by purs version 0.12.2

var $$Date = function () {
    function $$Date(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    }    $$Date.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new $$Date(value0, value1, value2);
            };
        };
    };
    return $$Date;
}();
var eqDate = new Eq(function (x) {
    return function (y) {
        return eq(eqYear)(x.value0)(y.value0) && eq(eqMonth)(x.value1)(y.value1) && eq(eqDay)(x.value2)(y.value2);
    };
});
var ordDate = new Ord(function () {
    return eqDate;
}, function (x) {
    return function (y) {
        var v = compare(ordYear)(x.value0)(y.value0);
        if (v instanceof LT) {
            return LT.value;
        }        if (v instanceof GT) {
            return GT.value;
        }        var v1 = compare(ordMonth)(x.value1)(y.value1);
        if (v1 instanceof LT) {
            return LT.value;
        }        if (v1 instanceof GT) {
            return GT.value;
        }        return compare(ordDay)(x.value2)(y.value2);
    };
});
var canonicalDate = function (y) {
    return function (m) {
        return function (d) {
            var mkDate = function (y$prime) {
                return function (m$prime) {
                    return function (d$prime) {
                        return new $$Date(y$prime, fromJust()(toEnum(boundedEnumMonth)(m$prime)), d$prime);
                    };
                };
            };
            return _canonicalDateImpl(mkDate, y, fromEnum(boundedEnumMonth)(m), d);
        };
    };
};
var boundedDate = new Bounded(function () {
    return ordDate;
}, new $$Date(bottom(boundedYear), bottom(boundedMonth), bottom(boundedDay)), new $$Date(top(boundedYear), top(boundedMonth), top(boundedDay)));

// Generated by purs version 0.12.2
var ordSecond = ordInt;
var ordMinute = ordInt;
var ordMillisecond = ordInt;
var ordHour = ordInt;
var eqSecond = eqInt;
var eqMinute = eqInt;
var eqMillisecond = eqInt;
var eqHour = eqInt;
var boundedSecond = new Bounded(function () {
    return ordSecond;
}, 0, 59);
var boundedMinute = new Bounded(function () {
    return ordMinute;
}, 0, 59);
var boundedMillisecond = new Bounded(function () {
    return ordMillisecond;
}, 0, 999);
var boundedHour = new Bounded(function () {
    return ordHour;
}, 0, 23);
var boundedEnumSecond = new BoundedEnum(function () {
    return boundedSecond;
}, function () {
    return enumSecond;
}, 60, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 59) {
        return new Just(n);
    }    {
        return Nothing.value;
    }    throw new Error("Failed pattern match at Data.Time.Component (line 90, column 1 - line 90, column 49): " + [n.constructor.name]);
});
var enumSecond = new Enum(function () {
    return ordSecond;
}, function ($28) {
    return toEnum(boundedEnumSecond)(function (v) {
        return v - 1 | 0;
    }(fromEnum(boundedEnumSecond)($28)));
}, function ($29) {
    return toEnum(boundedEnumSecond)(function (v) {
        return v + 1 | 0;
    }(fromEnum(boundedEnumSecond)($29)));
});
var boundedEnumMinute = new BoundedEnum(function () {
    return boundedMinute;
}, function () {
    return enumMinute;
}, 60, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 59) {
        return new Just(n);
    }    {
        return Nothing.value;
    }    throw new Error("Failed pattern match at Data.Time.Component (line 61, column 1 - line 61, column 49): " + [n.constructor.name]);
});
var enumMinute = new Enum(function () {
    return ordMinute;
}, function ($30) {
    return toEnum(boundedEnumMinute)(function (v) {
        return v - 1 | 0;
    }(fromEnum(boundedEnumMinute)($30)));
}, function ($31) {
    return toEnum(boundedEnumMinute)(function (v) {
        return v + 1 | 0;
    }(fromEnum(boundedEnumMinute)($31)));
});
var boundedEnumMillisecond = new BoundedEnum(function () {
    return boundedMillisecond;
}, function () {
    return enumMillisecond;
}, 1000, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 999) {
        return new Just(n);
    }    {
        return Nothing.value;
    }    throw new Error("Failed pattern match at Data.Time.Component (line 120, column 1 - line 120, column 59): " + [n.constructor.name]);
});
var enumMillisecond = new Enum(function () {
    return ordMillisecond;
}, function ($32) {
    return toEnum(boundedEnumMillisecond)(function (v) {
        return v - 1 | 0;
    }(fromEnum(boundedEnumMillisecond)($32)));
}, function ($33) {
    return toEnum(boundedEnumMillisecond)(function (v) {
        return v + 1 | 0;
    }(fromEnum(boundedEnumMillisecond)($33)));
});
var boundedEnumHour = new BoundedEnum(function () {
    return boundedHour;
}, function () {
    return enumHour;
}, 24, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 23) {
        return new Just(n);
    }    {
        return Nothing.value;
    }    throw new Error("Failed pattern match at Data.Time.Component (line 32, column 1 - line 32, column 45): " + [n.constructor.name]);
});
var enumHour = new Enum(function () {
    return ordHour;
}, function ($34) {
    return toEnum(boundedEnumHour)(function (v) {
        return v - 1 | 0;
    }(fromEnum(boundedEnumHour)($34)));
}, function ($35) {
    return toEnum(boundedEnumHour)(function (v) {
        return v + 1 | 0;
    }(fromEnum(boundedEnumHour)($35)));
});

// Generated by purs version 0.12.2

var Time = function () {
    function Time(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    }    Time.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Time(value0, value1, value2, value3);
                };
            };
        };
    };
    return Time;
}();
var second = function (v) {
    return v.value2;
};
var minute = function (v) {
    return v.value1;
};
var millisecond = function (v) {
    return v.value3;
};
var hour = function (v) {
    return v.value0;
};
var timeToMillis = function (t) {
    return Milliseconds(3600000.0 * _toNumber(fromEnum(boundedEnumHour)(hour(t))) + 60000.0 * _toNumber(fromEnum(boundedEnumMinute)(minute(t))) + 1000.0 * _toNumber(fromEnum(boundedEnumSecond)(second(t))) + _toNumber(fromEnum(boundedEnumMillisecond)(millisecond(t))));
};
var eqTime = new Eq(function (x) {
    return function (y) {
        return eq(eqHour)(x.value0)(y.value0) && eq(eqMinute)(x.value1)(y.value1) && eq(eqSecond)(x.value2)(y.value2) && eq(eqMillisecond)(x.value3)(y.value3);
    };
});
var ordTime = new Ord(function () {
    return eqTime;
}, function (x) {
    return function (y) {
        var v = compare(ordHour)(x.value0)(y.value0);
        if (v instanceof LT) {
            return LT.value;
        }        if (v instanceof GT) {
            return GT.value;
        }        var v1 = compare(ordMinute)(x.value1)(y.value1);
        if (v1 instanceof LT) {
            return LT.value;
        }        if (v1 instanceof GT) {
            return GT.value;
        }        var v2 = compare(ordSecond)(x.value2)(y.value2);
        if (v2 instanceof LT) {
            return LT.value;
        }        if (v2 instanceof GT) {
            return GT.value;
        }        return compare(ordMillisecond)(x.value3)(y.value3);
    };
});
var boundedTime = new Bounded(function () {
    return ordTime;
}, new Time(bottom(boundedHour), bottom(boundedMinute), bottom(boundedSecond), bottom(boundedMillisecond)), new Time(top(boundedHour), top(boundedMinute), top(boundedSecond), top(boundedMillisecond)));
var maxTime = timeToMillis(top(boundedTime));
var minTime = timeToMillis(bottom(boundedTime));

// Generated by purs version 0.12.2

var DateTime = function () {
    function DateTime(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }    DateTime.create = function (value0) {
        return function (value1) {
            return new DateTime(value0, value1);
        };
    };
    return DateTime;
}();
var eqDateTime = new Eq(function (x) {
    return function (y) {
        return eq(eqDate)(x.value0)(y.value0) && eq(eqTime)(x.value1)(y.value1);
    };
});
var ordDateTime = new Ord(function () {
    return eqDateTime;
}, function (x) {
    return function (y) {
        var v = compare(ordDate)(x.value0)(y.value0);
        if (v instanceof LT) {
            return LT.value;
        }        if (v instanceof GT) {
            return GT.value;
        }        return compare(ordTime)(x.value1)(y.value1);
    };
});
var date = function (v) {
    return v.value0;
};
var boundedDateTime = new Bounded(function () {
    return ordDateTime;
}, new DateTime(bottom(boundedDate), bottom(boundedTime)), new DateTime(top(boundedDate), top(boundedTime)));

// Generated by purs version 0.12.2
var toDateTime = function () {
    var mkDateTime = function (y) {
        return function (mo) {
            return function (d) {
                return function (h) {
                    return function (mi) {
                        return function (s) {
                            return function (ms) {
                                return new DateTime(canonicalDate(y)(fromJust()(toEnum(boundedEnumMonth)(mo)))(d), new Time(h, mi, s, ms));
                            };
                        };
                    };
                };
            };
        };
    };
    return _toDateTimeImpl(mkDateTime);
}();
var instant = function (v) {
    if (v >= -8.6399778816e15 && v <= 8.639977881599999e15) {
        return new Just(v);
    }    {
        return Nothing.value;
    }    throw new Error("Failed pattern match at Data.DateTime.Instant (line 44, column 1 - line 44, column 41): " + [v.constructor.name]);
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

var _getElementById = function (id) {
  return function (node) {
    return function () {
      return node.getElementById(id);
    };
  };
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

var getElementById = function (eid) {
    return function ($0) {
        return map(functorEffect)(toMaybe)(_getElementById(eid)($0));
    };
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2
var text = _unsafeCoerce;
var render$prime = _runEffectFn3(_render_);
var render = function (jsx) {
    return function (node) {
        return render$prime(jsx)(node)(pure(applicativeEffect)(_unit));
    };
};
var css = _unsafeCoerce;

var _unsafePerformEffect = function (f) {
  return f();
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2
var stopPropagation = unsafeEventFn(function (e) {
    return _unsafePerformEffect(function __do() {
        var v = e.stopPropagation();
        return e;
    });
});
var preventDefault = unsafeEventFn(function (e) {
    return _unsafePerformEffect(function __do() {
        var v = e.preventDefault();
        return e;
    });
});
var capture = function (eventFn) {
    return handler(composeFlipped(semigroupoidBuilder)(preventDefault)(composeFlipped(semigroupoidBuilder)(stopPropagation)(eventFn)));
};
var capture_ = function (cb) {
    return capture(identity(categoryBuilder))(function (v) {
        return cb;
    });
};

var toggleSign = function (currentValue) {
    var $15 = currentValue === "0";
    if ($15) {
        return "0";
    }    var $16 = startsWith("-")(currentValue);
    if ($16) {
        return _replace("-")("")(currentValue);
    }    return "-" + currentValue;
};
var readoutStyle = css({
    gridColumn: "1 / span 4",
    fontSize: 48,
    textAlign: "right",
    border: "solid 1px black",
    height: 80,
    display: "flex",
    justifyContent: "flex-end",
    alignItems: "flex-end",
    paddingRight: 8,
    fontFamily: "system-ui",
    color: "#FFF",
    fontWeight: 100,
    overflow: "hidden"
});
var handleOperation = function (op$prime) {
    return function (s) {
        if (s.operation instanceof Nothing) {
            return {
                value: s.value,
                operation: new Just(op$prime),
                stack: ""
            };
        }        if (s.operation instanceof Just && s.stack === "") {
            return {
                value: show(showNumber)(s.operation.value0(_readFloat(s.value))(_readFloat(s.value))),
                operation: new Just(op$prime),
                stack: s.stack
            };
        }        if (s.operation instanceof Just) {
            return {
                value: show(showNumber)(s.operation.value0(_readFloat(s.value))(_readFloat(s.stack))),
                operation: new Just(op$prime),
                stack: ""
            };
        }        throw new Error("Failed pattern match at Calculator (line 83, column 25 - line 93, column 6): " + [s.constructor.name]);
    };
};
var handleNumber = function (key) {
    return function (s) {
        if (s.value === "0" && s.operation instanceof Nothing && s.stack === "") {
            return {
                value: key,
                operation: s.operation,
                stack: s.stack
            };
        }        if (s.operation instanceof Nothing && s.stack === "") {
            return {
                value: s.value + key,
                operation: s.operation,
                stack: s.stack
            };
        }        if (s.stack === "") {
            return {
                value: key,
                operation: s.operation,
                stack: s.value
            };
        }        return {
            value: s.value + key,
            operation: s.operation,
            stack: s.stack
        };
    };
};
var handleEquals = function (s) {
    if (s.operation instanceof Nothing) {
        return s;
    }    if (s.operation instanceof Just && s.stack === "") {
        return {
            value: show(showNumber)(s.operation.value0(_readFloat(s.value))(_readFloat(s.value))),
            operation: s.operation,
            stack: s.value
        };
    }    if (s.operation instanceof Just) {
        return {
            value: show(showNumber)(s.operation.value0(_readFloat(s.value))(_readFloat(s.stack))),
            operation: s.operation,
            stack: s.stack
        };
    }    throw new Error("Failed pattern match at Calculator (line 96, column 18 - line 99, column 100): " + [s.constructor.name]);
};
var enterDecimal = function (currentValue) {
    var $54 = includes(".")(currentValue);
    if ($54) {
        return currentValue;
    }    return currentValue + ".";
};
var handleDecimal = function (s) {
    if (s.operation instanceof Nothing && s.stack === "") {
        return {
            value: enterDecimal(s.value),
            operation: s.operation,
            stack: s.stack
        };
    }    if (s.stack === "") {
        return {
            value: enterDecimal("0"),
            operation: s.operation,
            stack: s.value
        };
    }    return {
        value: enterDecimal(s.value),
        operation: s.operation,
        stack: s.stack
    };
};
var buttonWidth = 60;
var containerStyle = css({
    display: "grid",
    gridTemplateColumns: "auto auto auto auto",
    width: (4 * buttonWidth | 0) + 3 | 0,
    background: "#333",
    gridGap: 1,
    borderRadius: 4,
    overflow: "hidden"
});
var buttonStyle = css({
    fontSize: 24,
    width: buttonWidth,
    height: 48,
    border: "none",
    background: "#666",
    color: "#FFF",
    fontFamily: "system-ui",
    fontWeight: 100,
    dispaly: "flex",
    justifyContent: "center",
    alignContent: "center",
    padding: 0
});
var operationStyle = _mergeStyles([buttonStyle, css({
    background: "#F90",
    fontSize: 32
})]);
var calculator = function () {
    var render = function (self) {
        var genericButton = function (label) {
            return function (handler) {
                return function (style) {
                    return button()({
                        onClick: capture_(self.setState(handler)),
                        children: [text(label)],
                        style: _mergeStyles([buttonStyle, style])
                    });
                };
            };
        };
        var numButton = function (num) {
            return genericButton(show(showInt)(num))(handleNumber(show(showInt)(num)))(buttonStyle);
        };
        var binOpButton = function (label) {
            return function (op) {
                return genericButton(label)(handleOperation(op))(operationStyle);
            };
        };
        var clearButton = genericButton("C")(function (s) {
            return {
                value: "0",
                operation: Nothing.value,
                stack: ""
            };
        })(buttonStyle);
        var plusMinusButton = genericButton("\xb1")(function (s) {
            return {
                value: toggleSign(s.value),
                operation: s.operation,
                stack: s.stack
            };
        })(buttonStyle);
        var percentButton = genericButton("%")(function (s) {
            return {
                value: show(showNumber)(1.0e-2 * _readFloat(s.value)),
                operation: s.operation,
                stack: s.stack
            };
        })(buttonStyle);
        return div$1()({
            children: [div$1()({
                style: containerStyle,
                children: [div$1()({
                    children: [text(self.state.value)],
                    style: readoutStyle
                }), clearButton, plusMinusButton, percentButton, binOpButton("\xf7")(div(euclideanRingNumber)), numButton(7), numButton(8), numButton(9), binOpButton("\xd7")(mul(semiringNumber)), numButton(4), numButton(5), numButton(6), binOpButton("-")(sub(ringNumber)), numButton(1), numButton(2), numButton(3), binOpButton("+")(add(semiringNumber)), genericButton("0")(handleNumber("0"))(css({
                    gridColumn: "1 / span 2",
                    width: (2 * buttonWidth | 0) + 1 | 0
                })), genericButton(".")(handleDecimal)(buttonStyle), genericButton("=")(handleEquals)(operationStyle)]
            })]
        });
    };
    var initialState = {
        value: "0",
        operation: Nothing.value,
        stack: ""
    };
    return _make()(_createComponent("Calculator"))({
        initialState: initialState,
        render: render
    });
}();

/* global window */

var _window = function () {
  return window;
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

/* global exports */

var _toInstantImpl = function (just) {
  return function (nothing) {
    return function (date) {
      var t = date.getTime();
      return isNaN(t) ? nothing : just(t);
    };
  };
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

var MonadAsk = function (Monad0, ask) {
    this.Monad0 = Monad0;
    this.ask = ask;
};
var monadAskFun = new MonadAsk(function () {
    return monadFn;
}, identity(categoryFn));

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

var MonadEffect = function (Monad0, liftEffect) {
    this.Monad0 = Monad0;
    this.liftEffect = liftEffect;
};
var monadEffectEffect = new MonadEffect(function () {
    return monadEffect;
}, identity(categoryFn));

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

var Nil = function () {
    function Nil() {}    Nil.value = new Nil();
    return Nil;
}();
var Cons = function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
}();
var NonEmptyList = function (x) {
    return x;
};
var toList = function (v) {
    return new Cons(v.value0, v.value1);
};
var foldableList = new Foldable(function (dictMonoid) {
    return function (f) {
        return foldl(foldableList)(function (acc) {
            return function ($174) {
                return append(dictMonoid.Semigroup0())(acc)(f($174));
            };
        })(mempty(dictMonoid));
    };
}, function (f) {
    var go = function ($copy_b) {
        return function ($copy_v) {
            var $tco_var_b = $copy_b;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(b, v) {
                if (v instanceof Nil) {
                    $tco_done = true;
                    return b;
                }                if (v instanceof Cons) {
                    $tco_var_b = f(b)(v.value0);
                    $copy_v = v.value1;
                    return;
                }                throw new Error("Failed pattern match at Data.List.Types (line 81, column 12 - line 83, column 30): " + [v.constructor.name]);
            }            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_b, $copy_v);
            }            return $tco_result;
        };
    };
    return go;
}, function (f) {
    return function (b) {
        var rev = foldl(foldableList)(flip(Cons.create))(Nil.value);
        return function ($175) {
            return foldl(foldableList)(flip(f))(b)(rev($175));
        };
    };
});
var foldableWithIndexList = new FoldableWithIndex(function () {
    return foldableList;
}, function (dictMonoid) {
    return function (f) {
        return foldlWithIndex(foldableWithIndexList)(function (i) {
            return function (acc) {
                return function ($176) {
                    return append(dictMonoid.Semigroup0())(acc)(f(i)($176));
                };
            };
        })(mempty(dictMonoid));
    };
}, function (f) {
    return function (acc) {
        return function ($177) {
            return snd(foldl(foldableList)(function (v) {
                return function (a) {
                    return new Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
                };
            })(new Tuple(0, acc))($177));
        };
    };
}, function (f) {
    return function (b) {
        return function (xs) {
            var v = function () {
                var rev = foldl(foldableList)(function (v1) {
                    return function (a) {
                        return new Tuple(v1.value0 + 1 | 0, new Cons(a, v1.value1));
                    };
                });
                return rev(new Tuple(0, Nil.value))(xs);
            }();
            return snd(foldl(foldableList)(function (v1) {
                return function (a) {
                    return new Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
                };
            })(new Tuple(v.value0, b))(v.value1));
        };
    };
});
var functorList = new Functor(function (f) {
    return foldr(foldableList)(function (x) {
        return function (acc) {
            return new Cons(f(x), acc);
        };
    })(Nil.value);
});
var functorNonEmptyList = functorNonEmpty(functorList);
var functorWithIndexList = new FunctorWithIndex(function () {
    return functorList;
}, function (f) {
    return foldrWithIndex(foldableWithIndexList)(function (i) {
        return function (x) {
            return function (acc) {
                return new Cons(f(i)(x), acc);
            };
        };
    })(Nil.value);
});
var functorWithIndexNonEmptyList = new FunctorWithIndex(function () {
    return functorNonEmptyList;
}, function (fn) {
    return function (v) {
        return NonEmptyList(mapWithIndex(functorWithIndex(functorWithIndexList))(function ($181) {
            return fn(maybe(0)(add(semiringInt)(1))($181));
        })(v));
    };
});
var semigroupList = new Semigroup(function (xs) {
    return function (ys) {
        return foldr(foldableList)(Cons.create)(ys)(xs);
    };
});
var semigroupNonEmptyList = new Semigroup(function (v) {
    return function (as$prime) {
        return new NonEmpty(v.value0, append(semigroupList)(v.value1)(toList(as$prime)));
    };
});
var applyList = new Apply(function () {
    return functorList;
}, function (v) {
    return function (v1) {
        if (v instanceof Nil) {
            return Nil.value;
        }        if (v instanceof Cons) {
            return append(semigroupList)(map(functorList)(v.value0)(v1))(apply(applyList)(v.value1)(v1));
        }        throw new Error("Failed pattern match at Data.List.Types (line 127, column 1 - line 127, column 33): " + [v.constructor.name, v1.constructor.name]);
    };
});
var applyNonEmptyList = new Apply(function () {
    return functorNonEmptyList;
}, function (v) {
    return function (v1) {
        return new NonEmpty(v.value0(v1.value0), append(semigroupList)(apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
    };
});
var bindList = new Bind(function () {
    return applyList;
}, function (v) {
    return function (v1) {
        if (v instanceof Nil) {
            return Nil.value;
        }        if (v instanceof Cons) {
            return append(semigroupList)(v1(v.value0))(bind(bindList)(v.value1)(v1));
        }        throw new Error("Failed pattern match at Data.List.Types (line 134, column 1 - line 134, column 31): " + [v.constructor.name, v1.constructor.name]);
    };
});
var bindNonEmptyList = new Bind(function () {
    return applyNonEmptyList;
}, function (v) {
    return function (f) {
        var v1 = f(v.value0);
        return new NonEmpty(v1.value0, append(semigroupList)(v1.value1)(bind(bindList)(v.value1)(function ($187) {
            return toList(f($187));
        })));
    };
});
var altNonEmptyList = new Alt(function () {
    return functorNonEmptyList;
}, append(semigroupNonEmptyList));
var altList = new Alt(function () {
    return functorList;
}, append(semigroupList));

// Generated by purs version 0.12.2
var unzip = foldr(foldableList)(function (v) {
    return function (v1) {
        return new Tuple(new Cons(v.value0, v1.value0), new Cons(v.value1, v1.value1));
    };
})(new Tuple(Nil.value, Nil.value));
var reverse = function () {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Nil) {
                    $tco_done = true;
                    return acc;
                }                if (v instanceof Cons) {
                    $tco_var_acc = new Cons(v.value0, acc);
                    $copy_v = v.value1;
                    return;
                }                throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [acc.constructor.name, v.constructor.name]);
            }            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            }            return $tco_result;
        };
    };
    return go(Nil.value);
}();
var mapWithIndex$1 = mapWithIndex(functorWithIndexList);
var mapMaybe$1 = function (f) {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Nil) {
                    $tco_done = true;
                    return reverse(acc);
                }                if (v instanceof Cons) {
                    var v1 = f(v.value0);
                    if (v1 instanceof Nothing) {
                        $tco_var_acc = acc;
                        $copy_v = v.value1;
                        return;
                    }                    if (v1 instanceof Just) {
                        $tco_var_acc = new Cons(v1.value0, acc);
                        $copy_v = v.value1;
                        return;
                    }                    throw new Error("Failed pattern match at Data.List (line 419, column 5 - line 421, column 32): " + [v1.constructor.name]);
                }                throw new Error("Failed pattern match at Data.List (line 417, column 3 - line 417, column 27): " + [acc.constructor.name, v.constructor.name]);
            }            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            }            return $tco_result;
        };
    };
    return go(Nil.value);
};
var length = foldl(foldableList)(function (acc) {
    return function (v) {
        return acc + 1 | 0;
    };
})(0);
var concatMap$2 = flip(bind(bindList));
var catMaybes$1 = mapMaybe$1(identity(categoryFn));

// Generated by purs version 0.12.2
var mapWithIndex$2 = mapWithIndex(functorWithIndexNonEmptyList);
var concatMap$3 = flip(bind(bindNonEmptyList));

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2
var toInstant = composeKleisliFlipped(bindMaybe)(function ($4) {
    return instant(Milliseconds($4));
})(_toInstantImpl(Just.create)(Nothing.value));
var toDateTime$1 = map(functorFn)(map(functorMaybe)(toDateTime))(toInstant);
var toDate = map(functorFn)(map(functorMaybe)(date))(toDateTime$1);

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2
var toNonElementParentNode = _unsafeCoerce;

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

var _document = function (window) {
  return function () {
    return window.document;
  };
};

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

/* global Image */

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

// Generated by purs version 0.12.2

var main = function __do() {
    var v = _window();
    var v1 = _document(v)();
    var v2 = getElementById("container")(toNonElementParentNode(v1))();
    if (v2 instanceof Nothing) {
        return $$throw("Container element not found.")();
    }    if (v2 instanceof Just) {
        var app = calculator({});
        return render(app)(v2.value0)();
    }    throw new Error("Failed pattern match at Main (line 20, column 5 - line 24, column 27): " + [v2.constructor.name]);
};

export { main };
