import { Component, createElement } from './react.js';
import { render as render$1 } from './react-dom.js';
var _unit = {};

var _showIntImpl = function (n) {
  return n.toString();
};

var _showNumberImpl = function (n) {
  var str = n.toString();
  return isNaN(str + ".0") ? str : str + ".0";
}; 

var Show = function (show) {
  this.show = show;
};

var showNumber = new Show(_showNumberImpl);
var showInt = new Show(_showIntImpl);

var show = function (dict) {
  return dict.show;
}; 

var _numDiv = function (n1) {
  return function (n2) {
    return n1 / n2;
  };
}; 

var _numSub = function (n1) {
  return function (n2) {
    return n1 - n2;
  };
};

var _numAdd = function (n1) {
  return function (n2) {
    return n1 + n2;
  };
};

var _numMul = function (n1) {
  return function (n2) {
    return n1 * n2;
  };
}; 

var Semiring = function (add, mul, one, zero) {
  this.add = add;
  this.mul = mul;
  this.one = one;
  this.zero = zero;
};

var semiringNumber = new Semiring(_numAdd, _numMul, 1.0, 0.0);

var mul = function (dict) {
  return dict.mul;
};

var add = function (dict) {
  return dict.add;
}; 

var Ring = function (Semiring0, sub) {
  this.Semiring0 = Semiring0;
  this.sub = sub;
};

var sub = function (dict) {
  return dict.sub;
};

var ringNumber = new Ring(function () {
  return semiringNumber;
}, _numSub); 
var CommutativeRing = function (Ring0) {
  this.Ring0 = Ring0;
};

var commutativeRingNumber = new CommutativeRing(function () {
  return ringNumber;
}); 
var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
  this.CommutativeRing0 = CommutativeRing0;
  this.degree = degree;
  this.div = div;
  this.mod = mod;
};

var euclideanRingNumber = new EuclideanRing(function () {
  return commutativeRingNumber;
}, function (v) {
  return 1;
}, _numDiv, function (v) {
  return function (v1) {
    return 0.0;
  };
});

var div = function (dict) {
  return dict.div;
}; 

var Semigroupoid = function (compose) {
  this.compose = compose;
};

var semigroupoidFn = new Semigroupoid(function (f) {
  return function (g) {
    return function (x) {
      return f(g(x));
    };
  };
});

var compose = function (dict) {
  return dict.compose;
};

var composeFlipped = function (dictSemigroupoid) {
  return function (f) {
    return function (g) {
      return compose(dictSemigroupoid)(g)(f);
    };
  };
}; 

var Category = function (Semigroupoid0, identity) {
  this.Semigroupoid0 = Semigroupoid0;
  this.identity = identity;
};

var identity = function (dict) {
  return dict.identity;
};

var categoryFn = new Category(function () {
  return semigroupoidFn;
}, function (x) {
  return x;
}); 
var Functor = function (map) {
  this.map = map;
};

var map = function (dict) {
  return dict.map;
};

var Apply = function (Functor0, apply) {
  this.Functor0 = Functor0;
  this.apply = apply;
};

var apply = function (dict) {
  return dict.apply;
}; 

var Applicative = function (Apply0, pure) {
  this.Apply0 = Apply0;
  this.pure = pure;
};

var pure = function (dict) {
  return dict.pure;
};

var liftA1 = function (dictApplicative) {
  return function (f) {
    return function (a) {
      return apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
    };
  };
};

var Bind = function (Apply0, bind) {
  this.Apply0 = Apply0;
  this.bind = bind;
};

var bind = function (dict) {
  return dict.bind;
};

var Monad = function (Applicative0, Bind1) {
  this.Applicative0 = Applicative0;
  this.Bind1 = Bind1;
};

var ap = function (dictMonad) {
  return function (f) {
    return function (a) {
      return bind(dictMonad.Bind1())(f)(function (v) {
        return bind(dictMonad.Bind1())(a)(function (v1) {
          return pure(dictMonad.Applicative0())(v(v1));
        });
      });
    };
  };
}; 

var Nothing = function () {
  function Nothing() {}

  Nothing.value = new Nothing();
  return Nothing;
}();

var Just = function () {
  function Just(value0) {
    this.value0 = value0;
  }

  Just.create = function (value0) {
    return new Just(value0);
  };

  return Just;
}();

var _pureE = function (a) {
  return function () {
    return a;
  };
};

var _bindE = function (a) {
  return function (f) {
    return function () {
      return f(a())();
    };
  };
}; 

var monadEffect = new Monad(function () {
  return applicativeEffect;
}, function () {
  return bindEffect;
});
var bindEffect = new Bind(function () {
  return applyEffect;
}, _bindE);
var applyEffect = new Apply(function () {
  return functorEffect;
}, ap(monadEffect));
var applicativeEffect = new Applicative(function () {
  return applyEffect;
}, _pureE);
var functorEffect = new Functor(liftA1(applicativeEffect)); 
// module Unsafe.Coerce
var _unsafeCoerce = function (x) {
  return x;
}; 


/* globals exports */
var _readFloat = parseFloat; 
var _replace = function (s1) {
  return function (s2) {
    return function (s3) {
      return s3.replace(s1, s2);
    };
  };
}; 

function includes(searchString) {
  return function (str) {
    return str.includes(searchString);
  };
}

function startsWith(searchString) {
  return function (s) {
    return s.startsWith(searchString);
  };
} 

var _createComponent = function () {
  // Begin component prototype functions
  // (`this`-dependent, defined outside `createComponent`
  // for a slight performance boost)
  function toSelf() {
    var instance = this;

    var setStateThen = function (update) {
      return function (effects) {
        return function () {
          instance.setState(function (state) {
            return {
              $$state: update(state.$$state)
            };
          }, effects);
        };
      };
    };

    var self = {
      props: instance.props.$$props,
      state: instance.state === null ? null : instance.state.$$state,
      setState: function (update) {
        return setStateThen(update)(undefined);
      },
      setStateThen: setStateThen,
      instance_: instance
    };
    return self;
  }

  function componentDidMount() {
    var didMount = this.$$spec.didMount;

    if (didMount !== undefined) {
      didMount(this.toSelf())();
    }
  }

  function shouldComponentUpdate(nextProps, nextState) {
    var shouldUpdate = this.$$spec.shouldUpdate;
    return shouldUpdate === undefined ? true : shouldUpdate(this.toSelf())({
      nextProps: nextProps.$$props,
      nextState: nextState === null ? null : nextState.$$state
    });
  }

  function componentDidUpdate(prevProps, prevState) {
    var didUpdate = this.$$spec.didUpdate;

    if (didUpdate !== undefined) {
      didUpdate(this.toSelf())({
        prevProps: prevProps.$$props,
        prevState: prevState === null ? null : prevState.$$state
      })();
    }
  }

  function componentWillUnmount() {
    this.$$mounted = false;
    var willUnmount = this.$$spec.willUnmount;

    if (willUnmount !== undefined) {
      willUnmount(this.toSelf())();
    }
  }

  function render() {
    return this.$$spec.render(this.toSelf());
  } // End component prototype functions


  return function (displayName) {
    var Component$1 = function constructor(props) {
      this.$$mounted = true;
      this.$$spec = props.$$spec;
      this.state = // React may optimize components with no state,
      // so we leave state null if it was left as
      // the default value.
      this.$$spec.initialState === undefined ? null : {
        $$state: this.$$spec.initialState
      };
      return this;
    };

    Component$1.displayName = displayName;
    Component$1.prototype = Object.create(Component.prototype);
    Component$1.prototype.constructor = Component$1;
    Component$1.prototype.toSelf = toSelf;
    Component$1.prototype.shouldComponentUpdate = shouldComponentUpdate;
    Component$1.prototype.componentDidMount = componentDidMount;
    Component$1.prototype.componentDidUpdate = componentDidUpdate;
    Component$1.prototype.componentWillUnmount = componentWillUnmount;
    Component$1.prototype.render = render;
    return Component$1;
  };
}();

var _make = function (_unionDict) {
  return function ($$type) {
    return function ($$spec) {
      var $$specPadded = {
        initialState: $$spec.initialState,
        render: $$spec.render,
        didMount: $$spec.didMount,
        shouldUpdate: $$spec.shouldUpdate,
        didUpdate: $$spec.didUpdate,
        willUnmount: $$spec.willUnmount
      };
      return function ($$props) {
        var props = {
          $$props: $$props,
          $$spec: $$specPadded
        };
        return createElement($$type, props);
      };
    };
  };
};

var _element_ = function (component, props) {
  return createElement.apply(null, [component, props].concat(props && props.children || null));
};

var _runFn2 = function (fn) {
  return function (a) {
    return function (b) {
      return fn(a, b);
    };
  };
}; 

var _nullable = function (a, r, f) {
  return a == null ? r : f(a);
}; 

var toMaybe = function (n) {
  return _nullable(n, Nothing.value, Just.create);
};

var _runEffectFn3 = function runEffectFn3(fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function () {
          return fn(a, b, c);
        };
      };
    };
  };
}; 

var element = _runFn2(_element_);

var _render_ = function (jsx, node, callback) {
  render$1(jsx, node, callback);
};

var _mergeStyles = function (styles) {
  return Object.assign.apply(null, [{}].concat(styles));
};

var _error = function (msg) {
  return new Error(msg);
};

var _throwException = function (e) {
  return function () {
    throw e;
  };
}; 

var $$throw = function ($1) {
  return _throwException(_error($1));
}; 

var EventFn = function (x) {
  return x;
};

var unsafeEventFn = EventFn;
var semigroupoidBuilder = semigroupoidFn;

var handler = function (v) {
  return function (cb) {
    return function ($22) {
      return cb(v($22))();
    };
  };
};

var categoryBuilder = categoryFn;
var unsafeCreateDOMComponent = _unsafeCoerce; 
var div$1 = function (dictUnion) {
  return element(unsafeCreateDOMComponent("div"));
};

var button = function (dictUnion) {
  return element(unsafeCreateDOMComponent("button"));
}; 

var _getElementById = function (id) {
  return function (node) {
    return function () {
      return node.getElementById(id);
    };
  };
}; 

var getElementById = function (eid) {
  return function ($0) {
    return map(functorEffect)(toMaybe)(_getElementById(eid)($0));
  };
}; 

var text = _unsafeCoerce;

var render$prime = _runEffectFn3(_render_);

var render = function (jsx) {
  return function (node) {
    return render$prime(jsx)(node)(pure(applicativeEffect)(_unit));
  };
};

var css = _unsafeCoerce;

var _unsafePerformEffect = function (f) {
  return f();
}; 

var stopPropagation = unsafeEventFn(function (e) {
  return _unsafePerformEffect(function __do() {
    var v = e.stopPropagation();
    return e;
  });
});
var preventDefault = unsafeEventFn(function (e) {
  return _unsafePerformEffect(function __do() {
    var v = e.preventDefault();
    return e;
  });
});

var capture = function (eventFn) {
  return handler(composeFlipped(semigroupoidBuilder)(preventDefault)(composeFlipped(semigroupoidBuilder)(stopPropagation)(eventFn)));
};

var capture_ = function (cb) {
  return capture(identity(categoryBuilder))(function (v) {
    return cb;
  });
};

var toggleSign = function (currentValue) {
  var $15 = currentValue === "0";

  if ($15) {
    return "0";
  }

  var $16 = startsWith("-")(currentValue);

  if ($16) {
    return _replace("-")("")(currentValue);
  }

  return "-" + currentValue;
};

var readoutStyle = css({
  gridColumn: "1 / span 4",
  fontSize: 48,
  textAlign: "right",
  border: "solid 1px black",
  height: 80,
  display: "flex",
  justifyContent: "flex-end",
  alignItems: "flex-end",
  paddingRight: 8,
  fontFamily: "system-ui",
  color: "#FFF",
  fontWeight: 100,
  overflow: "hidden"
});

var handleOperation = function (op$prime) {
  return function (s) {
    if (s.operation instanceof Nothing) {
      return {
        value: s.value,
        operation: new Just(op$prime),
        stack: ""
      };
    }

    if (s.operation instanceof Just && s.stack === "") {
      return {
        value: show(showNumber)(s.operation.value0(_readFloat(s.value))(_readFloat(s.value))),
        operation: new Just(op$prime),
        stack: s.stack
      };
    }

    if (s.operation instanceof Just) {
      return {
        value: show(showNumber)(s.operation.value0(_readFloat(s.value))(_readFloat(s.stack))),
        operation: new Just(op$prime),
        stack: ""
      };
    }

    throw new Error("Failed pattern match at Calculator (line 83, column 25 - line 93, column 6): " + [s.constructor.name]);
  };
};

var handleNumber = function (key) {
  return function (s) {
    if (s.value === "0" && s.operation instanceof Nothing && s.stack === "") {
      return {
        value: key,
        operation: s.operation,
        stack: s.stack
      };
    }

    if (s.operation instanceof Nothing && s.stack === "") {
      return {
        value: s.value + key,
        operation: s.operation,
        stack: s.stack
      };
    }

    if (s.stack === "") {
      return {
        value: key,
        operation: s.operation,
        stack: s.value
      };
    }

    return {
      value: s.value + key,
      operation: s.operation,
      stack: s.stack
    };
  };
};

var handleEquals = function (s) {
  if (s.operation instanceof Nothing) {
    return s;
  }

  if (s.operation instanceof Just && s.stack === "") {
    return {
      value: show(showNumber)(s.operation.value0(_readFloat(s.value))(_readFloat(s.value))),
      operation: s.operation,
      stack: s.value
    };
  }

  if (s.operation instanceof Just) {
    return {
      value: show(showNumber)(s.operation.value0(_readFloat(s.value))(_readFloat(s.stack))),
      operation: s.operation,
      stack: s.stack
    };
  }

  throw new Error("Failed pattern match at Calculator (line 96, column 18 - line 99, column 100): " + [s.constructor.name]);
};

var enterDecimal = function (currentValue) {
  var $54 = includes(".")(currentValue);

  if ($54) {
    return currentValue;
  }

  return currentValue + ".";
};

var handleDecimal = function (s) {
  if (s.operation instanceof Nothing && s.stack === "") {
    return {
      value: enterDecimal(s.value),
      operation: s.operation,
      stack: s.stack
    };
  }

  if (s.stack === "") {
    return {
      value: enterDecimal("0"),
      operation: s.operation,
      stack: s.value
    };
  }

  return {
    value: enterDecimal(s.value),
    operation: s.operation,
    stack: s.stack
  };
};

var buttonWidth = 60;
var containerStyle = css({
  display: "grid",
  gridTemplateColumns: "auto auto auto auto",
  width: (4 * buttonWidth | 0) + 3 | 0,
  background: "#333",
  gridGap: 1,
  borderRadius: 4,
  overflow: "hidden"
});
var buttonStyle = css({
  fontSize: 24,
  width: buttonWidth,
  height: 48,
  border: "none",
  background: "#666",
  color: "#FFF",
  fontFamily: "system-ui",
  fontWeight: 100,
  dispaly: "flex",
  justifyContent: "center",
  alignContent: "center",
  padding: 0
});

var operationStyle = _mergeStyles([buttonStyle, css({
  background: "#F90",
  fontSize: 32
})]);

var calculator = function () {
  var render = function (self) {
    var genericButton = function (label) {
      return function (handler) {
        return function (style) {
          return button()({
            onClick: capture_(self.setState(handler)),
            children: [text(label)],
            style: _mergeStyles([buttonStyle, style])
          });
        };
      };
    };

    var numButton = function (num) {
      return genericButton(show(showInt)(num))(handleNumber(show(showInt)(num)))(buttonStyle);
    };

    var binOpButton = function (label) {
      return function (op) {
        return genericButton(label)(handleOperation(op))(operationStyle);
      };
    };

    var clearButton = genericButton("C")(function (s) {
      return {
        value: "0",
        operation: Nothing.value,
        stack: ""
      };
    })(buttonStyle);
    var plusMinusButton = genericButton("\xb1")(function (s) {
      return {
        value: toggleSign(s.value),
        operation: s.operation,
        stack: s.stack
      };
    })(buttonStyle);
    var percentButton = genericButton("%")(function (s) {
      return {
        value: show(showNumber)(1.0e-2 * _readFloat(s.value)),
        operation: s.operation,
        stack: s.stack
      };
    })(buttonStyle);
    return div$1()({
      children: [div$1()({
        style: containerStyle,
        children: [div$1()({
          children: [text(self.state.value)],
          style: readoutStyle
        }), clearButton, plusMinusButton, percentButton, binOpButton("\xf7")(div(euclideanRingNumber)), numButton(7), numButton(8), numButton(9), binOpButton("\xd7")(mul(semiringNumber)), numButton(4), numButton(5), numButton(6), binOpButton("-")(sub(ringNumber)), numButton(1), numButton(2), numButton(3), binOpButton("+")(add(semiringNumber)), genericButton("0")(handleNumber("0"))(css({
          gridColumn: "1 / span 2",
          width: (2 * buttonWidth | 0) + 1 | 0
        })), genericButton(".")(handleDecimal)(buttonStyle), genericButton("=")(handleEquals)(operationStyle)]
      })]
    });
  };

  var initialState = {
    value: "0",
    operation: Nothing.value,
    stack: ""
  };
  return _make()(_createComponent("Calculator"))({
    initialState: initialState,
    render: render
  });
}();
/* global window */


var _window = function () {
  return window;
}; 
/* global exports */


var toNonElementParentNode = _unsafeCoerce; 
var _document = function (window) {
  return function () {
    return window.document;
  };
}; 
/* global Image */


var main = function __do() {
  var v = _window();

  var v1 = _document(v)();

  var v2 = getElementById("container")(toNonElementParentNode(v1))();

  if (v2 instanceof Nothing) {
    return $$throw("Container element not found.")();
  }

  if (v2 instanceof Just) {
    var app = calculator({});
    return render(app)(v2.value0)();
  }

  throw new Error("Failed pattern match at Main (line 20, column 5 - line 24, column 27): " + [v2.constructor.name]);
};

export { main };